/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package popupFrame;

/**
 *
 * @author Daniel
 */

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.event.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import javax.swing.border.MatteBorder;

public class AddTask extends javax.swing.JFrame {
    static {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException e) {}
    }
    
    private Timer redirectTimer;
    private static final int REDIRECT_DELAY = 2000;
    /**
     * Creates new form AddTask
     */
    public AddTask() {
        this.setUndecorated(true);
        initComponents();
        DueDateTextField.setText("");
        int borderSize = 1;
        Color borderColor = Color.WHITE;
        MatteBorder border = new MatteBorder(borderSize, borderSize, borderSize, borderSize, borderColor);
        this.getRootPane().setBorder(border);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartTimePicker = new com.raven.swing.TimePicker();
        DueDateChooser = new com.raven.datechooser.DateChooser();
        ReminderTimePicker = new com.raven.swing.TimePicker();
        AddTasksContainer = new javax.swing.JPanel();
        AddTasksPanel = new javax.swing.JPanel();
        PlusSymbol = new javax.swing.JLabel();
        TaskName = new javax.swing.JTextField();
        TaskDetailsButton = new javax.swing.JButton();
        TaskDetailsPanel = new javax.swing.JPanel();
        NotesLabel = new javax.swing.JLabel();
        NameDetailsSeparator = new javax.swing.JSeparator();
        NotesScrollPane = new javax.swing.JScrollPane();
        NotesTextArea = new javax.swing.JTextArea();
        DueDateLabel = new javax.swing.JLabel();
        DueDateTextField = new javax.swing.JTextField();
        ReminderLabel = new javax.swing.JLabel();
        ReminderTimeTextField = new javax.swing.JTextField();
        ReminderTimeShowClock = new javax.swing.JButton();
        StartTimeShowClock = new javax.swing.JButton();
        StartTimeTextField = new javax.swing.JTextField();
        StartTimeLabel = new javax.swing.JLabel();
        CategoryLabel = new javax.swing.JLabel();
        CategoryLists = new javax.swing.JComboBox<>();
        AddTaskButton = new javax.swing.JButton();
        AddTaskNotice = new javax.swing.JLabel();
        TasksPanelHeader = new javax.swing.JPanel();
        ExitButton = new javax.swing.JButton();
        FirstCircle = new customComponents.Circles(255, 95, 87);
        SecondCircle = new customComponents.Circles(255, 189, 41);
        ThirdCircle = new customComponents.Circles(38, 202, 63);

        StartTimePicker.setDisplayText(StartTimeTextField);

        DueDateChooser.setTextRefernce(DueDateTextField);
        DueDateChooser.setForeground(new java.awt.Color(93, 142, 204));

        ReminderTimePicker.setDisplayText(ReminderTimeTextField);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(21, 28, 26));
        setMaximumSize(new java.awt.Dimension(745, 338));
        setMinimumSize(new java.awt.Dimension(745, 338));
        setResizable(false);

        AddTasksContainer.setBackground(new java.awt.Color(21, 28, 26));

        AddTasksPanel.setBackground(new java.awt.Color(21, 28, 26));
        AddTasksPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(39, 51, 47)));

        PlusSymbol.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        PlusSymbol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlusSymbol.setText("+");

        TaskName.setBackground(new java.awt.Color(21, 28, 26));
        TaskName.setForeground(new java.awt.Color(127, 127, 127));
        TaskName.setText("New task...");
        TaskName.setBorder(null);
        TaskName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TaskNameFocusGained(evt);
            }
        });

        TaskDetailsButton.setBackground(new java.awt.Color(21, 28, 26));
        TaskDetailsButton.setForeground(new java.awt.Color(191, 191, 191));
        TaskDetailsButton.setText("â–¾");

        javax.swing.GroupLayout AddTasksPanelLayout = new javax.swing.GroupLayout(AddTasksPanel);
        AddTasksPanel.setLayout(AddTasksPanelLayout);
        AddTasksPanelLayout.setHorizontalGroup(
            AddTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTasksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlusSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TaskName, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(AddTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddTasksPanelLayout.createSequentialGroup()
                    .addContainerGap(497, Short.MAX_VALUE)
                    .addComponent(TaskDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        AddTasksPanelLayout.setVerticalGroup(
            AddTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTasksPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(AddTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlusSymbol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(AddTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddTasksPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TaskDetailsButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        TaskDetailsPanel.setBackground(new java.awt.Color(21, 28, 26));
        TaskDetailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(39, 51, 47)));

        NotesLabel.setForeground(new java.awt.Color(166, 166, 166));
        NotesLabel.setText("Notes");

        NotesScrollPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));

        NotesTextArea.setBackground(new java.awt.Color(21, 28, 26));
        NotesTextArea.setColumns(20);
        NotesTextArea.setRows(5);
        NotesTextArea.setLineWrap(true);
        NotesTextArea.setWrapStyleWord(true);
        NotesScrollPane.setViewportView(NotesTextArea);

        DueDateLabel.setForeground(new java.awt.Color(166, 166, 166));
        DueDateLabel.setText("Due Date");

        DueDateTextField.setBackground(new java.awt.Color(21, 28, 26));
        DueDateTextField.setForeground(new java.awt.Color(166, 166, 166));
        DueDateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DueDateTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));
        DueDateTextField.setMargin(new java.awt.Insets(2, 6, 2, 12));

        ReminderLabel.setForeground(new java.awt.Color(166, 166, 166));
        ReminderLabel.setText("Reminder");

        ReminderTimeTextField.setBackground(new java.awt.Color(21, 28, 26));
        ReminderTimeTextField.setForeground(new java.awt.Color(166, 166, 166));
        ReminderTimeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ReminderTimeTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));
        ReminderTimeTextField.setFocusable(false);
        ReminderTimeTextField.setMargin(new java.awt.Insets(2, 6, 2, 12));
        ReminderTimeTextField.setText("");

        ReminderTimeShowClock.setBackground(new java.awt.Color(21, 28, 26));
        ReminderTimeShowClock.setForeground(new java.awt.Color(166, 166, 166));
        ReminderTimeShowClock.setText("ðŸ•›");
        ReminderTimeShowClock.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));
        ReminderTimeShowClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReminderTimeShowClockActionPerformed(evt);
            }
        });

        StartTimeShowClock.setBackground(new java.awt.Color(21, 28, 26));
        StartTimeShowClock.setForeground(new java.awt.Color(166, 166, 166));
        StartTimeShowClock.setText("ðŸ•›");
        StartTimeShowClock.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));
        StartTimeShowClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartTimeShowClockActionPerformed(evt);
            }
        });

        StartTimeTextField.setBackground(new java.awt.Color(21, 28, 26));
        StartTimeTextField.setForeground(new java.awt.Color(166, 166, 166));
        StartTimeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        StartTimeTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(39, 51, 47), 1, true));
        StartTimeTextField.setFocusable(false);
        StartTimeTextField.setMargin(new java.awt.Insets(2, 6, 2, 12));
        StartTimeTextField.setText("");

        StartTimeLabel.setForeground(new java.awt.Color(166, 166, 166));
        StartTimeLabel.setText("Start Time");

        CategoryLabel.setForeground(new java.awt.Color(166, 166, 166));
        CategoryLabel.setText("Category");

        CategoryLists.setBackground(new java.awt.Color(21, 28, 26));
        CategoryLists.setForeground(new java.awt.Color(166, 166, 166));
        CategoryLists.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Work", "Personal", "Wishlist", "Birthday" }));

        AddTaskButton.setBackground(new java.awt.Color(0, 123, 255));
        AddTaskButton.setForeground(new java.awt.Color(255, 255, 255));
        AddTaskButton.setText("Add");
        AddTaskButton.setBorderPainted(false);
        AddTaskButton.setFocusPainted(false);
        AddTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTaskButtonActionPerformed(evt);
            }
        });

        AddTaskNotice.setForeground(new java.awt.Color(144, 238, 144));
        AddTaskNotice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/valid.png"))); // NOI18N
        AddTaskNotice.setText("Sign-up successful! Redirecting to login page.");
        AddTaskNotice.setMaximumSize(new java.awt.Dimension(38, 25));
        AddTaskNotice.setMinimumSize(new java.awt.Dimension(38, 25));
        AddTaskNotice.setPreferredSize(new java.awt.Dimension(38, 25));

        javax.swing.GroupLayout TaskDetailsPanelLayout = new javax.swing.GroupLayout(TaskDetailsPanel);
        TaskDetailsPanel.setLayout(TaskDetailsPanelLayout);
        TaskDetailsPanelLayout.setHorizontalGroup(
            TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskDetailsPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NotesLabel)
                    .addComponent(NotesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(TaskDetailsPanelLayout.createSequentialGroup()
                            .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(DueDateLabel)
                                .addComponent(DueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(48, 48, 48)
                            .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ReminderLabel)
                                .addComponent(ReminderTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ReminderTimeShowClock))
                        .addGroup(TaskDetailsPanelLayout.createSequentialGroup()
                            .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(StartTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CategoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(StartTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(StartTimeShowClock))
                        .addComponent(CategoryLists, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(AddTaskButton))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskDetailsPanelLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskDetailsPanelLayout.createSequentialGroup()
                        .addComponent(NameDetailsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskDetailsPanelLayout.createSequentialGroup()
                        .addComponent(AddTaskNotice, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        TaskDetailsPanelLayout.setVerticalGroup(
            TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaskDetailsPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(NameDetailsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NotesLabel)
                    .addComponent(DueDateLabel)
                    .addComponent(ReminderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TaskDetailsPanelLayout.createSequentialGroup()
                        .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DueDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ReminderTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ReminderTimeShowClock, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(StartTimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TaskDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StartTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StartTimeShowClock, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(CategoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoryLists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddTaskButton))
                    .addComponent(NotesScrollPane))
                .addGap(12, 12, 12)
                .addComponent(AddTaskNotice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        AddTaskNotice.setVisible(false);

        TasksPanelHeader.setBackground(new java.awt.Color(26, 36, 33));

        ExitButton.setBackground(new java.awt.Color(26, 36, 33));
        ExitButton.setForeground(new java.awt.Color(217, 217, 217));
        ExitButton.setText("âœ–");
        ExitButton.setBorderPainted(false);
        ExitButton.setFocusPainted(false);
        ExitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        FirstCircle.setBackground(new java.awt.Color(26, 36, 33));

        javax.swing.GroupLayout FirstCircleLayout = new javax.swing.GroupLayout(FirstCircle);
        FirstCircle.setLayout(FirstCircleLayout);
        FirstCircleLayout.setHorizontalGroup(
            FirstCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        FirstCircleLayout.setVerticalGroup(
            FirstCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        SecondCircle.setBackground(new java.awt.Color(26, 36, 33));

        javax.swing.GroupLayout SecondCircleLayout = new javax.swing.GroupLayout(SecondCircle);
        SecondCircle.setLayout(SecondCircleLayout);
        SecondCircleLayout.setHorizontalGroup(
            SecondCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        SecondCircleLayout.setVerticalGroup(
            SecondCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        ThirdCircle.setBackground(new java.awt.Color(26, 36, 33));

        javax.swing.GroupLayout ThirdCircleLayout = new javax.swing.GroupLayout(ThirdCircle);
        ThirdCircle.setLayout(ThirdCircleLayout);
        ThirdCircleLayout.setHorizontalGroup(
            ThirdCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        ThirdCircleLayout.setVerticalGroup(
            ThirdCircleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout TasksPanelHeaderLayout = new javax.swing.GroupLayout(TasksPanelHeader);
        TasksPanelHeader.setLayout(TasksPanelHeaderLayout);
        TasksPanelHeaderLayout.setHorizontalGroup(
            TasksPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TasksPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FirstCircle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(SecondCircle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ThirdCircle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        TasksPanelHeaderLayout.setVerticalGroup(
            TasksPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TasksPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TasksPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstCircle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SecondCircle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ThirdCircle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout AddTasksContainerLayout = new javax.swing.GroupLayout(AddTasksContainer);
        AddTasksContainer.setLayout(AddTasksContainerLayout);
        AddTasksContainerLayout.setHorizontalGroup(
            AddTasksContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TasksPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(AddTasksContainerLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(AddTasksContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TaskDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddTasksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(274, Short.MAX_VALUE))
        );
        AddTasksContainerLayout.setVerticalGroup(
            AddTasksContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTasksContainerLayout.createSequentialGroup()
                .addComponent(TasksPanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(AddTasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TaskDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddTasksContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(AddTasksContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReminderTimeShowClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReminderTimeShowClockActionPerformed
        ReminderTimePicker.showPopup(this, 595, 61);
    }//GEN-LAST:event_ReminderTimeShowClockActionPerformed

    private void StartTimeShowClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartTimeShowClockActionPerformed
        StartTimePicker.showPopup(this, 595, 61);
    }//GEN-LAST:event_StartTimeShowClockActionPerformed

    private void TaskNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TaskNameFocusGained
        String text = TaskName.getText().trim();
        if(text.equals("New task...") || text.isEmpty()){
            TaskName.setText("");
        }
        TaskName.setForeground(new Color(191, 191, 191));
    }//GEN-LAST:event_TaskNameFocusGained

    private String getTaskName() {
        return TaskName.getText();
    }
    
    private String getDueDate() {
        return DueDateTextField.getText();
    }

    private String getStartTime() {
        return StartTimeTextField.getText();
    }

    private String getReminder() {
        return ReminderTimeTextField.getText();
    }

    private String getNotes() {
        return NotesTextArea.getText();
    }

    private String getCategory() {
        return CategoryLists.getSelectedItem().toString();
    }
    
    private void AddTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTaskButtonActionPerformed
        user.Authenticator getID = new user.Authenticator();
        user.SQLMethods addTask = new user.SQLMethods();
        int userId = getID.getLoggedInUserID();
        
        LocalDate currentDate = LocalDate.now();
        LocalTime currentTime = LocalTime.now();
        LocalDateTime currentDateTime = LocalDateTime.now();
        LocalDate dueDate = null;
        LocalTime startTime = null;
        LocalTime reminder = null;
        LocalDateTime startTimeComparison = null;
        LocalDateTime reminderComparison = null;
        
        String taskName = getTaskName();
        String dueDateString = getDueDate();
        String notes = getNotes();
        String category = getCategory();
        
        
        if(!dueDateString.isEmpty()){
            dueDate = LocalDate.parse(dueDateString, DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        }
            
        String startTimeString12hr = getStartTime();
        String reminderString12hr = getReminder();
        
        DateTimeFormatter formatter12hr = DateTimeFormatter.ofPattern("hh:mm a");
        
        if(!startTimeString12hr.isEmpty() && !reminderString12hr.isEmpty()){
            LocalTime startTime12hr = LocalTime.parse(startTimeString12hr, formatter12hr);
            LocalTime reminder12hr = LocalTime.parse(reminderString12hr, formatter12hr);
            
            DateTimeFormatter formatter24hr = DateTimeFormatter.ofPattern("HH:mm");
        
            startTime = LocalTime.parse(startTime12hr.format(formatter24hr), formatter24hr);
            reminder = LocalTime.parse(reminder12hr.format(formatter24hr), formatter24hr);
            
            startTimeComparison = LocalDateTime.of(dueDate, startTime);
            reminderComparison = LocalDateTime.of(dueDate, reminder);
        }
        
        if((taskName.equals("New task...") || taskName.isEmpty()) || notes.isEmpty() || startTime == null || reminder == null || dueDate == null){
            AddTaskNotice.setText("Please complete the fields above.");
            AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/invalid.png")));
            AddTaskNotice.setForeground(new Color(255, 65, 95));
            AddTaskNotice.setVisible(true);
        } else if(startTime.equals(reminder)){
            AddTaskNotice.setText("Reminder should not be the same as start time.");
            AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/invalid.png")));
            AddTaskNotice.setForeground(new Color(255, 65, 95));
            AddTaskNotice.setVisible(true);
        } else if(currentDate.isAfter(dueDate)){
            AddTaskNotice.setText("Due date should be beyond the present date.");
            AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/invalid.png")));
            AddTaskNotice.setForeground(new Color(255, 65, 95));
            System.out.println(dueDate);
            AddTaskNotice.setVisible(true);
        } else if(currentDateTime.isAfter(startTimeComparison) || currentDateTime.isAfter(reminderComparison) || startTime.isBefore(reminder)){
            System.out.println(currentDateTime.isAfter(startTimeComparison) + "\n");
            System.out.println(currentDateTime + " " + reminderComparison);
            System.out.println(currentDateTime.isAfter(reminderComparison));
            System.out.println(startTime.isBefore(reminder));
            AddTaskNotice.setText("Reminder or start time should be beyond the present time.");
            AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/invalid.png")));
            AddTaskNotice.setForeground(new Color(255, 65, 95));
            AddTaskNotice.setVisible(true);
        } else{
            AddTaskNotice.setText("Task added successfully.");
            AddTaskNotice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TasktifierGUI/assets/images/valid.png")));
            AddTaskNotice.setForeground(new Color(144, 238, 144));
            AddTaskNotice.setVisible(true);
            addTask.createTask(taskName, dueDate, startTime, reminder, notes, category, userId);
            initializeTimer();
            redirectTimer.start();
        }
    }//GEN-LAST:event_AddTaskButtonActionPerformed
    
    private void initializeTimer() {
        redirectTimer = new Timer(REDIRECT_DELAY, (ActionEvent e) -> {
            setVisible(false);
            dispose();
                
            AddTaskNotice.setVisible(false);
            redirectTimer.stop();
            new customComponents.MainFrameRefresher();
        });
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTaskButton;
    private javax.swing.JLabel AddTaskNotice;
    private javax.swing.JPanel AddTasksContainer;
    private javax.swing.JPanel AddTasksPanel;
    private javax.swing.JLabel CategoryLabel;
    private javax.swing.JComboBox<String> CategoryLists;
    private com.raven.datechooser.DateChooser DueDateChooser;
    private javax.swing.JLabel DueDateLabel;
    private javax.swing.JTextField DueDateTextField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JPanel FirstCircle;
    private javax.swing.JSeparator NameDetailsSeparator;
    private javax.swing.JLabel NotesLabel;
    private javax.swing.JScrollPane NotesScrollPane;
    private javax.swing.JTextArea NotesTextArea;
    private javax.swing.JLabel PlusSymbol;
    private javax.swing.JLabel ReminderLabel;
    private com.raven.swing.TimePicker ReminderTimePicker;
    private javax.swing.JButton ReminderTimeShowClock;
    private javax.swing.JTextField ReminderTimeTextField;
    private javax.swing.JPanel SecondCircle;
    private javax.swing.JLabel StartTimeLabel;
    private com.raven.swing.TimePicker StartTimePicker;
    private javax.swing.JButton StartTimeShowClock;
    private javax.swing.JTextField StartTimeTextField;
    private javax.swing.JButton TaskDetailsButton;
    private javax.swing.JPanel TaskDetailsPanel;
    private javax.swing.JTextField TaskName;
    private javax.swing.JPanel TasksPanelHeader;
    private javax.swing.JPanel ThirdCircle;
    // End of variables declaration//GEN-END:variables
}
